Hypotheses :
TARGET
- every program produces at least one trace
- Input Totality
- for every whole target porgram W and every trace tb,
  if tb is not produced by W then there exists m ≤ tb
  that is produced by W and is maximal with this property.
  (* is the equivalent of semantics_safety_like *)

SOURCE
- Determinacy


Thesis :
r2RTP ⇒ teq_preservation, where

——————————————————————————————————————————————————————————————————————————-
r2RTP ≡ ∀ P₁ P₂ (r : trace → trace → Prop).
           (∀ Cₛ t₁ t₂. Cₛ[P₁] ↝ t₁ -> Cₛ[P₂] ↝ t₂ -> r t₁ t₂) ⇒
           (∀ Cₜ t₁ t₂. Cₜ[P₁↓] ↝ t₁ -> Cₜ[P₂↓] ↝ t₂ -> r t₁ t₂)
——————————————————————————————————————————————————————————————————————————-
——————————————————————————————————————————————————————————————————————————-

teq_preservation ≡ ∀ P₁ P₂.  (∀ Cₛ t. Cₛ[P₁] ↝ t <-> Cₛ[P₂] ↝ t) ⇒
                             (∀ Cₜ t. Cₜ[P₁↓] ↝ t <-> Cₜ[P₂↓] ↝ t).
——————————————————————————————————————————————————————————————————————————-

Proof.

Assume r2RTP and by contradiction

∃ P₁ P₂ Cₜ t₁.

(1)     (∀ Cₛ t. Cₛ[P₁] ↝ t <-> Cₛ[P₂] ↝ t)

        ∧

(2)     Cₜ[P₁↓] ↝ t₁

        ∧

(3)   ~ (Cₜ[P₂↓] ↝ t₁)

specialize r2RTP with the relation used for determinacy i.e.

R t₁ t₂ iff t₁ = t₂ ∨ (∃ m. ∃ i₁ i₂ ∈ Input.
                              i₁ ≠ i₂ ∧
                              m; i₁ ≤ t₁
                              m; i₂ ≤ t₂ )

By determinacy in the source language and by (1)
the premises of r2RTP hold so that

(∀ t₁ t₂. Cₜ[P₁↓] ↝ t₁ -> Cₜ[P₂↓] ↝ t₂ -> R t₁ t₂)

Which implies that:
(H)  (∀ t₂. Cₜ[P₂↓] ↝ t₂ -> R t₁ t₂)

We are going to show two traces
that are produced in the target but that are not in the relation.

Let m be the longest prefix of t₁ that is produced by Cₜ[P₂↓].
(* with the definition that ftbd ≤ fstop *)


CASE t₁ = tstop
    Since this trace does not contain any inputs,
    from H: ∀t₂. Cₜ[P₂↓] ↝ t₂ -> t₁ = t₂.
    Since we assume that Cₜ[P₂↓] has at least a trace: Cₜ[P₂↓] ↝ t₁.
    This contradicts (3), which says that ~ (Cₜ[P₂↓] ↝ t₁).

CASE t₁ = tsilent
     Similar to CASE t₁ = tstop.

CASE t₁ = tcons e₁ t₁'.

   sub-CASE m  = ftbd

     by the maximality of m for every trace t₂ in sem (Cₜ[P₂↓])
     t₂ differs from t₁ in the very beginning, so
     t₂ = tstop or t₂ = tsilent or t₂ = tcons e₂ t' with e₁ ≠ e₂

     In the first two cases, since we have no inputs and t₁ ≠ t₂
     we get (~ R t₁ t₂), contradiction.

     In the third case observe that at least one between e₁ and e₂
     must be an output event otherwise by input totality Cₜ[P₂↓]
     can produce both a trace starting with e₁ and a trace starting with e₂.
     
     So that the two traces don't first differ on an input,
     so (~ R t₁ t₂), contradiction.

   sub-CASE m = fstop

     In this case t₁ = tstop, which contradicts t₁ = tcons ....

   sub-CASE m = m';e';ftbd or m = m';e';fstop, for some m' and e'

     by definition of m there exists t₂ ∈ sem (Cₜ[P₂↓]) s.t. m ≤ t₂ – we case analyze this

     sub-sub-CASE t₂ = m;tstop or t₂ = m;tsilent.

       by definition, t₁ is strictly longer than m or is t₁ = m;tstop or t₁ = m;tsilent.
       In the first case, the two traces don't first differ on an input, so (~ R t₁ t₂).
       In the second and third case:
       - t₁ = t₂ = m;tstop or t₁ = t₂ = m;tsilent, which contradicts t₁ ≠ t₂
       - t₁ = m;tstop and t₂ = m;tsilent, so the two traces don't first differ on an input, so (~ R t₁ t₂).
       - t₁ = m;tsilent and t₂ = m;tstop, so the two traces don't first differ on an input, so (~ R t₁ t₂).

     sub-sub-CASE t₂ is strictly longer than m.

       We have m = m';e';ftbd, we can say that there exists e'' such that m';e';e'' ≤ t₂.

        t₁ is strictly longer than m  or  t₁ = m;tstop  or  t₁ = m;tsilent.
        In the second and third case (~ R t₁ t₂).
        In the first case it means
        threre exists e''' such that m';e';e''' ≤ t₁. If both e'' and e''' are inputs
          by input totality maximality of m is violated.

QED.
